generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "postgresql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Sharecount {
  id           Int           @id @default(autoincrement())
  name         String
  currency     String
  expenses     Expense[]
  participants Participant[]
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt

  @@map("sharecount")
}

model Expense {
  id            Int                     @id @default(autoincrement())
  name          String
  amount_total  Float                   @default(0)
  date          DateTime                @default(now())
  sharecount    Sharecount              @relation(fields: [sharecount_id], references: [id], onDelete: Cascade)
  sharecount_id Int
  owner         Participant             @relation(fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  owner_id      Int
  participants  ParticipantsInExpense[]
  expense_info  Expense_info[]
  created_at    DateTime                @default(now())
  updated_at    DateTime                @updatedAt

  @@map("expense")
}

model Participant {
  id            Int                     @id @default(autoincrement())
  name          String
  sharecount    Sharecount              @relation(fields: [sharecount_id], references: [id], onDelete: Cascade)
  sharecount_id Int
  ownExpenses   Expense[]
  expenses      ParticipantsInExpense[]
  created_at    DateTime                @default(now())
  updated_at    DateTime                @updatedAt
  expense_info  Expense_info[]

  @@map("participant")
}

// Pivot table for many-to-many relationship between Expense and Participant
model ParticipantsInExpense {
  expense        Expense     @relation(fields: [expense_id], references: [id])
  expense_id     Int
  participant    Participant @relation(fields: [participant_id], references: [id])
  participant_id Int
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
  // TODO: delete Expense_info TABLE and add amount here
  @@id([expense_id, participant_id])
}

model Expense_info {
  id             Int         @id @default(autoincrement())
  amount         Float       @default(0)
  expense        Expense     @relation(fields: [expense_id], references: [id], onDelete: Cascade)
  expense_id     Int
  participant    Participant @relation(fields: [participant_id], references: [id], onDelete: Cascade)
  participant_id Int
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt

  @@map("expense_info")
}
